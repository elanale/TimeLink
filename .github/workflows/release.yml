# -------------------------------------------------------------------------------
# Workflow: Build and Release Electron App
# Triggers on Git tags v*.*.* (e.g. v1.0.1), packages with electron-builder,
# and publishes to GitHub Releases.
# -------------------------------------------------------------------------------
name: Build and Release Electron App

on:
  push:
    # Only fire when a tag matching v<semver> is pushed
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # needed for creating releases & uploading assets

jobs:
  build-and-release:
    runs-on: macos-latest

    env:
      NODE_ENV: production
      ELECTRON_BUILDER_CACHE: ${{ runner.temp }}/electron-builder-cache

    steps:
      # ───────────────────────────────────────────────────────────────────
      # Step 1: Check out repository (with full history & tags)
      # ───────────────────────────────────────────────────────────────────
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ───────────────────────────────────────────────────────────────────
      # Step 2: Set up Node.js & npm cache
      # ───────────────────────────────────────────────────────────────────
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # ───────────────────────────────────────────────────────────────────
      # Step 3: Install dependencies
      # ───────────────────────────────────────────────────────────────────
      - name: Install dependencies
        run: npm ci

      # ───────────────────────────────────────────────────────────────────
      # Step 4: Ensure package.json version matches Git tag
      # ───────────────────────────────────────────────────────────────────
      - name: Ensure package.json version matches Git tag
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          PKG_VERSION=$(node -pe "require('./package.json').version")
          echo "Git tag: $TAG"
          echo "package.json version: $PKG_VERSION"
          if [ "$TAG" != "$PKG_VERSION" ]; then
            echo "Error: Git tag ($TAG) does not match package.json version ($PKG_VERSION)"
            exit 1
          fi

      # ───────────────────────────────────────────────────────────────────
      # Step 5: Build and Publish with electron-builder
      # ───────────────────────────────────────────────────────────────────
      - name: Build and Publish with electron-builder
        id: build_and_publish
        uses: electron-builder/electron-builder-action@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # If you only want mac targets, uncomment:
          # targets: mac
          # If you need code signing on macOS, add:
          # mac-sign: true
          # mac-codesign-identity: "Developer ID Application: Your Name (TEAMID)"
        secrets: ${{ secrets.MAC_CERT_PWD }}
